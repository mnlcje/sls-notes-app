import { AuthService } from './../auth/auth.service';
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ThrowStmt } from '@angular/compiler';
import { Observable } from 'rxjs';
import { RequiredValidator } from '@angular/forms';
import { RequestSigner } from 'aws4';

declare const API_ROOT: string;
declare const STAGE: string;

@Injectable({providedIn: 'root'})
export class NotesApiService {
    
    options;
    
    constructor(private httpClient: HttpClient , private authService : AuthService) { }

    
    setHeaders(path = '/', method = '' , body = ''){

        const host = new URL(API_ROOT);
        let args = {

            service: 'execute-api',
            region: 'us-east-1',
            hostname: host.hostname,
            path: path,
            method: method,
            body: body,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        };

        if(method == 'GET')
        {
            delete args.body;
        }
        
        this.options ={};
        try{

            let savedCredJson = this.authService.getCredentials();
            if(savedCredJson){
                let savedCreds = JSON.parse(savedCredJson);
                let creds = {
                    accessKeyId : savedCreds.Credentials.AccessKeyId,
                    secretAccessKey : savedCreds.Credentials.SecretKey,
                    sessionToken : savedCreds.Credentials.SessionToken
                };

                //Sign API Request with AWS Signature generated by RequestSigner
                let signer = new RequestSigner(args, creds);
                let signed = signer.sign();
                //Add AWS Signature Headers to Request Header
                this.options.headers = signed.headers;
                //Removing 'Host' header which was added by AWS Signature Header and explicitly specifying 'Host' header
                //in Request object is not recommended
                delete this.options.headers.Host

                //Adding Custome Headers - user_id and user_name
                this.options.headers.user_id  = savedCreds.IdentityId;                
                this.options.headers.user_name  = savedCreds.user_name;
            }
        }
        catch(error){

        }
        
    }


    addNote(item){
        let path = STAGE + '/note';
        let endPoint = API_ROOT + path;

        //Note Id , TimeStamp values will be generated at the REST API Backend
        let itemData = {
            content : item.content,
            cat: item.cat,
            title: item.title
            };

        let reqBody = {
         Item : itemData
        };

        this.setHeaders(path,'POST',JSON.stringify(reqBody));

        return this.httpClient.post(endPoint, reqBody, this.options);
    }

    updateNote(item){

        let path = STAGE + '/note';
        let endPoint = API_ROOT + path;
        
        let itemData = {
            content : item.content,
            cat: item.cat,
            title: item.title,
            timestamp : parseInt(item.timestamp),
            note_id:item.note_id
        }

        let reqbody = {
            Item: itemData
        }

        this.setHeaders(path,'PATCH',JSON.stringify(reqbody));
        return this.httpClient.patch(endPoint, reqbody, this.options);

    }

    getNotes(startKey?): Observable<any>{

        let path = STAGE + '/notes?limit=8';
        
        if(startKey > 0){
            path += '&start=' + startKey;
        }

        let endPoint = API_ROOT + path;

        this.setHeaders(path,'GET');
        console.log(this.options);
        return this.httpClient.get(endPoint, this.options);
    }

    deleteNote(timestamp) {
      let path =  STAGE + '/note/t/' + timestamp;
      let endPoint = API_ROOT + path;

      this.setHeaders(path,'DELETE');
      return this.httpClient.delete(endPoint, this.options);
    }
    
}